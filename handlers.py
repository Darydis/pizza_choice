import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import ContextTypes

from aggregation import aggregate_results
from menu_parser import parse_menu
from models import BotState, Poll

logger = logging.getLogger(__name__)
state = BotState()

MENU_KB = ReplyKeyboardMarkup([['–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', '–£–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç']], resize_keyboard=True)


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # 1. –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏ URL/bytes
    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    img_bytes = await file.download_as_bytearray()

    photos = context.user_data.setdefault("pending_photos", [])
    photos.append(img_bytes)
    count = len(photos)

    await update.message.reply_text(
        f"–§–æ—Ç–æ #{count} –ø–æ–ª—É—á–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª –Ω–∏–∂–µ.",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="done")]]
        ),
    )


async def done_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    photos = context.user_data.pop("pending_photos", None)
    if not photos:
        await query.message.reply_text(
            "–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é."
        )
        return

    all_items = []
    for img in photos:
        try:
            items = await parse_menu(img)
            all_items.extend(items)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ parse_menu:")
            await query.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–¥–Ω–æ —Ñ–æ—Ç–æ: {e}")
            return

    # –ø–µ—Ä–µ–Ω—É–º–µ—Ä—É–µ–º –ø—É–Ω–∫—Ç—ã
    for idx, item in enumerate(all_items, start=1):
        item.id = idx

    # —Å–æ–∑–¥–∞—ë–º –æ–ø—Ä–æ—Å
    poll_id = state.next_poll_id
    state.next_poll_id += 1
    poll = Poll(id=poll_id, menu=all_items)
    state.polls[poll_id] = poll

    # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    user_id = query.from_user.id
    poll.participants.add(user_id)
    context.user_data["poll_id"] = poll_id
    context.user_data["index"] = 0
    context.user_data["ratings"] = {}

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    lines = [f"{p.id}. {p.name}" for p in all_items]
    await query.message.reply_text(
        f"\n\n–°–æ–∑–¥–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä #{poll_id}. –û—Ü–µ–Ω–∏—Ç–µ –ø–∏—Ü—Ü—ã –æ—Ç 1 –¥–æ 5:"
    )
    await _send_next(update, context)


async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /join <id>")
        return
    try:
        poll_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π id")
        return
    poll = state.polls.get(poll_id)
    if not poll:
        await update.message.reply_text("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    poll.participants.add(update.effective_chat.id)
    context.user_data["poll_id"] = poll_id
    context.user_data["index"] = 0
    context.user_data["ratings"] = {}
    await update.message.reply_text(
        f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ {poll_id}. –û—Ü–µ–Ω–∏—Ç–µ –ø–∏—Ü—Ü—ã –æ—Ç 1 –¥–æ 5"
    )
    await _send_next(update, context)


async def _send_next(update: Update, context: ContextTypes.DEFAULT_TYPE):
    poll_id = context.user_data.get("poll_id")
    index = context.user_data.get("index", 0)
    poll = state.polls.get(poll_id)
    if not poll:
        return
    if index >= len(poll.menu):
        user_id = update.effective_user.id
        for pid, rating in context.user_data.get("ratings", {}).items():
            poll.votes.setdefault(pid, {})[user_id] = rating
        await update.effective_message.reply_text("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω")
        context.user_data.clear()
        return
    pizza = poll.menu[index]
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(str(i), callback_data=f"rate:{i}") for i in range(1, 6)]
    ])
    await update.effective_message.reply_text(
        f"{pizza.id}. {pizza.name}", reply_markup=keyboard
    )


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if not data.startswith("rate:"):
        return
    score = int(data.split(":", 1)[1])
    poll_id = context.user_data.get("poll_id")
    index = context.user_data.get("index", 0)
    poll = state.polls.get(poll_id)
    if not poll:
        await query.edit_message_reply_markup(None)
        return
    if index >= len(poll.menu):
        return
    pizza = poll.menu[index]
    context.user_data.setdefault("ratings", {})[pizza.id] = score
    context.user_data["index"] = index + 1
    try:
        await query.edit_message_reply_markup(None)
    except BadRequest:

        pass
    await _send_next(update, context)


async def result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /result <id> <K>")
        return
    try:
        poll_id = int(context.args[0])
        k = int(context.args[1])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        return
    poll = state.polls.get(poll_id)
    if not poll:
        await update.message.reply_text("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    summary = aggregate_results(poll, k)
    for chat_id in poll.participants:
        await context.bot.send_message(chat_id=chat_id, text=summary)
    if update.effective_chat.id not in poll.participants:
        await update.message.reply_text(summary)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
    await update.message.reply_text(
        "üëã –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–µ–Ω—é (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ).\n"
        "–ö–æ–≥–¥–∞ –≤—Å—ë –≥–æ—Ç–æ–≤–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.\n\n"
        "üó≥ ¬´–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è¬ª ‚Äî –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n"
        "üìä ¬´–£–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç¬ª ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ç–æ–≥–∏",
        reply_markup=MENU_KB
    )


async def join_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
        chat = update.callback_query.message
    else:
        chat = update.message
        context.user_data["awaiting_join"] = True
        await chat.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")


async def handle_join_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –æ–ø—Ä–æ—Å–∞ —Ç–µ–∫—Å—Ç–æ–º
    if not context.user_data.get("awaiting_join"):
        return

    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    poll_id = int(text)
    context.user_data.pop("awaiting_join", None)
    # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É join, —ç–º—É–ª–∏—Ä—É—è args
    context.args = [text]
    await join(update, context)


async def result_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—Ä–æ—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º —É—á–∞—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    poll_id = next(
        (pid for pid in sorted(state.polls.keys(), reverse=True)
         if user_id in state.polls[pid].participants),
        None
    )
    if not poll_id:
        await update.message.reply_text("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –æ–ø—Ä–æ—Å–µ.", reply_markup=MENU_KB)
        return
    poll = state.polls[poll_id]
    # 1) —Å–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω—é –ø–æ —Å—É–º–º–µ –≥–æ–ª–æ—Å–æ–≤ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    sorted_items = sorted(
        poll.menu,
        key=lambda it: sum(poll.votes.get(it.id, {}).values()),
        reverse=True
    )
    # 2) –Ω—É–º–µ—Ä—É–µ–º —É–∂–µ –≤ –ø–æ—Ä—è–¥–∫–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
    lines = [f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ #{poll_id}:"] + [
        f"{idx + 1}. {item.name} ‚Äî {sum(poll.votes.get(item.id, {}).values())}"
        for idx, item in enumerate(sorted_items)
    ]
    await update.message.reply_text("\n".join(lines), reply_markup=MENU_KB)
